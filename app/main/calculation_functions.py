from shapely.ops import transform, nearest_points
from shapely.geometry import LineString, Point
from flask import current_app
from config import Config
from gpxpy import parse
import logging

# convert .gpx file into a list of GPS points
def convert_gpx_file_to_list(gpx_file):
    # list of GPS points [lat, long] from the given .gpx file
    # these GPS points form a route
    route_points = []

    try:
        # parse gpx file using gpxpy
        parsed_gpx_file = parse(gpx_file)
    except Exception as error:
        # return error if something went wrong wtih parsing
        return error

    # from the parsed gpx file, get the latitude and longitude of each point
    # and append it to the route point list
    for track in parsed_gpx_file.tracks:
        for segment in track.segments:
            for point in segment.points:
                route_points.append([point.latitude, point.longitude])

    # return the route point list
    return route_points


# given a) a list of route points (generated by convert_gpx_file_to_list),
# and b) a GPS point [lat, long]
# determine whether or not the given GPS point is "within" the route by:
# 1) getting the distance of the GPS point from the line segment formed by the list of route points, and
# 2) checking if that distance is less than or equal to the set maximum distance
def point_is_within_route(device_point, route_points):
    # create the shapely line segment and point from the given GPS points
    line_segment = LineString([tuple(route_point) for route_point in route_points])
    gps_point = Point(device_point[0], device_point[1])

    # transform the line segment and point so that their coordinates are projected onto the Philippine map projection
    transformed_line_segment = transform(current_app.config["PROJECTION"], line_segment)
    transformed_gps_point = transform(current_app.config["PROJECTION"], gps_point)

    # get the distance between the point and the line segment in meters
    point_to_line_distance = transformed_gps_point.distance(transformed_line_segment)

    # return true if the point-to-line distance is less than or equal to the set maximum distance
    # between the GPS device and route. otherwise, return false
    return (
        point_to_line_distance <= current_app.config["COLORUM_MAX_DISTANCE"],
        point_to_line_distance,
    )
